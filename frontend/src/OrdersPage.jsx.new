import React, { useEffect, useState } from 'react';
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  Button,
  Breadcrumbs,
  Link as MuiLink,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  IconButton,
  CircularProgress,
  Divider,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';
import { Link } from 'react-router-dom';
import NavigateNextIcon from '@mui/icons-material/NavigateNext';
import VisibilityIcon from '@mui/icons-material/Visibility';
import GetAppIcon from '@mui/icons-material/GetApp';
import AddIcon from '@mui/icons-material/Add';
import CloseIcon from '@mui/icons-material/Close';
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';
import AreaChart from './components/AreaChart';

const OrdersPage = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [orderHistory, setOrderHistory] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [detailDialogOpen, setDetailDialogOpen] = useState(false);

  // Generate some mock order history data for the chart
  const generateOrderHistory = () => {
    const data = [];
    const categories = [];
    const today = new Date();
    
    for (let i = 0; i < 14; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() - 13 + i);
      categories.push(date.toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit' }));
      data.push(Math.floor(Math.random() * 30) + 20);
    }
    
    return { data, categories };
  };

  useEffect(() => {
    setLoading(true);
    // Check if there's a newly created order in localStorage
    const storedOrders = localStorage.getItem('bakeryOrders');
    const parsedOrders = storedOrders ? JSON.parse(storedOrders) : [];
    
    // Simulate API fetch
    setTimeout(() => {
      // Mock orders data
      const mockOrders = [
        {
          id: 101,
          date: '09.06.25',
          products: 5,
          quantity: 280,
          total: 345.80,
          status: 'In Bearbeitung',
          note: 'Wochenanfangsbestellung',
          items: [
            { name: 'Brötchen', quantity: 120, price: 0.40 },
            { name: 'Croissant', quantity: 50, price: 1.30 },
            { name: 'Baguette', quantity: 35, price: 1.80 },
            { name: 'Brezel', quantity: 65, price: 0.90 },
            { name: 'Laugenstange', quantity: 45, price: 1.20 }
          ]
        },
        {
          id: 100,
          date: '08.06.25',
          products: 8,
          quantity: 430,
          total: 521.50,
          status: 'Abgeschlossen',
          note: 'Wochenendbestellung',
          items: [
            { name: 'Brötchen', quantity: 200, price: 0.40 },
            { name: 'Croissant', quantity: 100, price: 1.30 },
            { name: 'Brezel', quantity: 145, price: 0.90 }
          ]
        }
      ];
      
      // Combine mock orders with stored orders
      const combinedOrders = [...parsedOrders, ...mockOrders];
      
      setOrders(combinedOrders);
      setLoading(false);
      setOrderHistory(generateOrderHistory());
    }, 800);
  }, []);

  const getStatusColor = (status) => {
    return status === 'Abgeschlossen' ? 'success' : 'warning';
  };
  
  // Open order detail dialog
  const handleOpenOrderDetails = (order) => {
    setSelectedOrder(order);
    setDetailDialogOpen(true);
  };
  
  // Close order detail dialog
  const handleCloseOrderDetails = () => {
    setDetailDialogOpen(false);
  };
  
  // Handle creating a new order from planning
  const handleCreateNewOrder = () => {
    // Navigate to planning page
    window.location.href = '/planning';
  };

  return (
    <Box>
      {/* Breadcrumbs */}
      <Breadcrumbs 
        separator={<NavigateNextIcon fontSize="small" />} 
        aria-label="breadcrumb"
        sx={{ mb: 3 }}
      >
        <MuiLink 
          component={Link} 
          to="/"
          underline="hover"
          color="inherit"
        >
          Zur Übersicht
        </MuiLink>
        <Typography color="text.primary">Bestellungen</Typography>
      </Breadcrumbs>

      {/* Header with action button */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h5" component="h1" gutterBottom>
          Bestellungen
        </Typography>
        <Button
          variant="contained"
          color="primary"
          startIcon={<AddIcon />}
          sx={{ borderRadius: 28 }}
          onClick={handleCreateNewOrder}
        >
          Neue Bestellung
        </Button>
      </Box>

      {/* Order History Chart */}
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>Bestellungsverlauf</Typography>
          <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
            Anzahl der Bestellungen in den letzten 14 Tagen
          </Typography>
          {orderHistory.data && (
            <AreaChart 
              data={orderHistory.data}
              categories={orderHistory.categories}
              height={250}
            />
          )}
        </CardContent>
      </Card>

      {/* Orders Table */}
      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>Aktuelle Bestellungen</Typography>
          
          {loading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
              <CircularProgress />
            </Box>
          ) : orders.length > 0 ? (
            <TableContainer component={Paper} sx={{ boxShadow: 'none' }}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>Bestellung #</TableCell>
                    <TableCell>Datum</TableCell>
                    <TableCell>Produkte</TableCell>
                    <TableCell align="right">Menge</TableCell>
                    <TableCell align="right">Summe</TableCell>
                    <TableCell>Status</TableCell>
                    <TableCell align="center">Aktionen</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {orders.map((order) => (
                    <TableRow key={order.id} hover>
                      <TableCell>#{order.id}</TableCell>
                      <TableCell>{order.date}</TableCell>
                      <TableCell>{order.products}</TableCell>
                      <TableCell align="right">{order.quantity}</TableCell>
                      <TableCell align="right">{order.total}€</TableCell>
                      <TableCell>
                        <Chip 
                          label={order.status} 
                          color={getStatusColor(order.status)} 
                          size="small" 
                          variant="outlined"
                        />
                      </TableCell>
                      <TableCell align="center">
                        <IconButton 
                          size="small" 
                          color="primary" 
                          title="Details anzeigen"
                          onClick={() => handleOpenOrderDetails(order)}
                        >
                          <VisibilityIcon fontSize="small" />
                        </IconButton>
                        <IconButton size="small" color="primary" title="Herunterladen">
                          <GetAppIcon fontSize="small" />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          ) : (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography color="textSecondary">Keine Bestellungen vorhanden</Typography>
            </Box>
          )}
        </CardContent>
      </Card>
      
      {/* Order Detail Dialog */}
      <Dialog
        open={detailDialogOpen}
        onClose={handleCloseOrderDetails}
        fullWidth
        maxWidth="md"
      >
        {selectedOrder && (
          <>
            <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <ShoppingCartIcon sx={{ mr: 1 }} />
                Bestellung #{selectedOrder.id}
                <Chip 
                  label={selectedOrder.status} 
                  color={getStatusColor(selectedOrder.status)} 
                  size="small" 
                  variant="outlined"
                  sx={{ ml: 2 }}
                />
              </Box>
              <IconButton onClick={handleCloseOrderDetails} edge="end">
                <CloseIcon />
              </IconButton>
            </DialogTitle>
            <DialogContent>
              <Grid container spacing={3}>              
                {/* Order Details */}
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 500 }}>
                    Bestelldetails
                  </Typography>
                  <Paper variant="outlined" sx={{ p: 2, mb: 3 }}>
                    <Grid container spacing={2}>
                      <Grid item xs={6}>
                        <Typography variant="body2" color="text.secondary">Datum</Typography>
                        <Typography variant="body1">{selectedOrder.date}</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="body2" color="text.secondary">Gesamtmenge</Typography>
                        <Typography variant="body1">{selectedOrder.quantity} Stk.</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="body2" color="text.secondary">Artikelanzahl</Typography>
                        <Typography variant="body1">{selectedOrder.products} Produkte</Typography>
                      </Grid>
                      <Grid item xs={6}>
                        <Typography variant="body2" color="text.secondary">Gesamtwert</Typography>
                        <Typography variant="body1" sx={{ fontWeight: 'bold' }}>
                          {typeof selectedOrder.total === 'number' ? selectedOrder.total.toFixed(2) : selectedOrder.total}€
                        </Typography>
                      </Grid>
                      {selectedOrder.note && (
                        <Grid item xs={12}>
                          <Typography variant="body2" color="text.secondary">Notiz</Typography>
                          <Typography variant="body1">{selectedOrder.note}</Typography>
                        </Grid>
                      )}
                    </Grid>
                  </Paper>
                </Grid>
                
                {/* Order Items */}
                <Grid item xs={12} md={6}>
                  <Typography variant="subtitle1" gutterBottom sx={{ fontWeight: 500 }}>
                    Bestellte Artikel
                  </Typography>
                  <Paper variant="outlined" sx={{ p: 0 }}>
                    <Table size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell>Artikel</TableCell>
                          <TableCell align="right">Menge</TableCell>
                          <TableCell align="right">Einzelpreis</TableCell>
                          <TableCell align="right">Summe</TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {selectedOrder.items && selectedOrder.items.map((item, index) => (
                          <TableRow key={index}>
                            <TableCell>{item.name}</TableCell>
                            <TableCell align="right">{item.quantity} Stk.</TableCell>
                            <TableCell align="right">{item.price.toFixed(2)}€</TableCell>
                            <TableCell align="right">{(item.quantity * item.price).toFixed(2)}€</TableCell>
                          </TableRow>
                        ))}
                        {!selectedOrder.items && (
                          <TableRow>
                            <TableCell colSpan={4} align="center">
                              <Typography variant="body2" color="text.secondary" sx={{ py: 2 }}>
                                Keine Artikeldetails verfügbar
                              </Typography>
                            </TableCell>
                          </TableRow>
                        )}
                      </TableBody>
                    </Table>
                  </Paper>
                </Grid>
              </Grid>
            </DialogContent>
            <DialogActions sx={{ px: 3, py: 2 }}>
              <Button onClick={handleCloseOrderDetails}>Schließen</Button>
              <Button 
                variant="contained" 
                startIcon={<GetAppIcon />}
                sx={{ ml: 1 }}
              >
                Als PDF exportieren
              </Button>
            </DialogActions>
          </>
        )}
      </Dialog>
    </Box>
  );
};

export default OrdersPage;
